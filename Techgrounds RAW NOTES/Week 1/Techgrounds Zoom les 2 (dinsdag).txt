les 2/ 12-3-2024
gaan we verder werken alleen , tot 13uur

ssh jaz@18.196.227.119 -i "C:\Nest-Ja-Nieste.pem" -p 52202

OPDRACHT 2
Beschrijf voor jezelf hoe je je repository gaat inrichten op een manier zodat het voor iedereen (jezelf en buitenstaanders) duidelijk is wat de structuur is.


Het opzetten van een goed gestructureerde repository is essentieel voor het begrijpen en onderhouden van een project, zowel voor jezelf als voor buitenstaanders. Hier zijn enkele stappen om een duidelijke structuur te creëren:

1. **Leesbare documentatie toevoegen**: Begin met het toevoegen van een README-bestand in de hoofdmap van je repository. Dit README-bestand moet een overzicht geven van het project, de doelstellingen, instructies voor installatie en gebruik, en eventuele bijzonderheden over de structuur van de repository.

2. **Mapstructuur definiëren**: Bedenk een logische mapstructuur die de verschillende componenten van je project organiseert. Bijvoorbeeld:

   - `src/`: voor broncodebestanden.
   - `docs/`: voor documentatiebestanden.
   - `tests/`: voor testbestanden.
   - `assets/`: voor afbeeldingen, video's, of andere niet-codebestanden.
   - `scripts/`: voor hulpprogramma's of scripts die worden gebruikt bij het bouwen, testen of implementeren van het project.

3. **Naamgeving van bestanden en mappen**: Gebruik consistente en beschrijvende namen voor mappen en bestanden. Vermijd het gebruik van spaties en speciale tekens in namen, omdat dit problemen kan veroorzaken op verschillende besturingssystemen.

4. **Gebruik van Git-ignore-bestanden**: Voeg een `.gitignore`-bestand toe om bestanden en mappen te negeren die niet moeten worden opgenomen in de versiebeheerhistorie, zoals tijdelijke bestanden, gegenereerde bestanden en afhankelijkheden.

5. **Documentatie binnen de code**: Voeg commentaar toe aan je code om de functionaliteit en het doel van verschillende delen van de code uit te leggen. Dit maakt het gemakkelijker voor anderen (en jezelf in de toekomst) om de code te begrijpen en aan te passen.

6. **Gebruik van branches**: Maak gebruik van Git-branches om nieuwe functies te ontwikkelen of bugs op te lossen zonder de hoofdtak van het project te verstoren. Zorg ervoor dat de branchnaam betekenisvol is en duidelijk aangeeft welke functie of bug wordt aangepakt.

7. **Issue tracking**: Maak gebruik van de issue tracker van het versiebeheersysteem (bijv. GitHub Issues) om taken, bugs en andere problemen bij te houden. Wijs taken toe aan teamleden, wijs prioriteiten toe en houd de voortgang van het project bij.

8. **Code review**: Stel een proces op voor het beoordelen van code voordat deze wordt samengevoegd in de hoofdtak van het project. Dit helpt bij het identificeren van fouten, het delen van kennis en het handhaven van codekwaliteit.

Door deze richtlijnen te volgen, kun je een goed gestructureerde repository creëren die gemakkelijk te begrijpen en te onderhouden is voor zowel jou als anderen die aan het project werken.
-------------------------------------------------------------------------------------

BESTUDEER
-Markdown
Markdown is een eenvoudige opmaaktaal die is ontworpen om gemakkelijk te worden geschreven en gelezen als platte tekst, maar die kan worden geconverteerd naar HTML (en andere formaten) voor presentatie op het web. Het is populair geworden voor het schrijven van documentatie, README-bestanden in softwareprojecten, blogposts en andere vormen van online content vanwege zijn eenvoud en leesbaarheid.

Markdown biedt een set van conventies om tekst te structureren en op te maken met behulp van symbolen en leestekens, in plaats van complexe HTML-tags te gebruiken. Enkele van de meest voorkomende elementen die worden ondersteund door Markdown zijn:

- **Koppen**: Met behulp van hash-symbolen (`#`) kunnen verschillende niveaus van koppen worden gemaakt.
- **Tekstopmaak**: *Italic*, **bold**, en ~~strikethrough~~ teksten zijn eenvoudig te maken.
- **Lijsten**: Ongesorteerde (met `*`, `-` of `+`) en gesorteerde lijsten (met nummering).
- **Links en afbeeldingen**: Invoegen van hyperlinks en afbeeldingen met behulp van respectievelijk vierkante haken en ronde haken.
- **Blokcitaten**: Tekst kan worden geïndenteerd om blokcitaten te creëren.
- **Codeblokken**: Invoegen van codefragmenten met behulp van achterticks (` ` `).
- **Tabellen**: Opmaak van tabellen met behulp van verticale strepen en koppeltekens.

Markdown is platformonafhankelijk en wordt ondersteund door veel verschillende tekstbewerkingsprogramma's, versiebeheersystemen (zoals GitHub), en contentmanagementsystemen. Het is bedoeld om snel en gemakkelijk leesbare documenten te maken die eenvoudig kunnen worden omgezet naar HTML of andere formaten voor online publicatie.


-WYSIWYG vs WYSIWYM
WYSIWYG staat voor "What You See Is What You Get" en WYSIWYM staat voor "What You See Is What You Mean". Beide termen verwijzen naar verschillende benaderingen voor het maken en bewerken van documenten, vooral in tekstverwerkingssoftware of opmaakhulpmiddelen. Hier is een uitleg van elk:

WYSIWYG (What You See Is What You Get):

Bij een WYSIWYG-systeem wordt de inhoud van het document weergegeven op het scherm zoals het eruit zal zien wanneer het wordt afgedrukt of gepubliceerd.
Gebruikers zien direct het visuele resultaat van hun bewerkingen, inclusief opmaak, lettertypen, afbeeldingen en lay-out.
Het doel van WYSIWYG is om het bewerken van documenten te vergemakkelijken door een directe visuele representatie te bieden van hoe het eindresultaat eruit zal zien.
WYSIWYM (What You See Is What You Mean):

Bij een WYSIWYM-systeem wordt de nadruk gelegd op de betekenis van de inhoud in plaats van op de visuele presentatie.
Gebruikers markeren de structuur en de betekenis van de inhoud met behulp van opmaakcodes of semantische tags, maar zien niet direct hoe het er visueel uit zal zien.
De visuele presentatie wordt pas gegenereerd bij het bekijken, afdrukken of publiceren van het document, op basis van de opmaakinstructies die zijn opgenomen in de semantische markeringen.
Het belangrijkste verschil tussen WYSIWYG en WYSIWYM is dus waar de nadruk ligt tijdens het bewerken: bij WYSIWYG ligt de nadruk op de visuele presentatie, terwijl bij WYSIWYM de nadruk ligt op de betekenis van de inhoud. Beide benaderingen hebben hun eigen voordelen en toepassingen, afhankelijk van de behoeften en voorkeuren van de gebruiker.

linux key : mag alleen permissies van jouzelf hebben

CLI commando om aanteloggen op mijn linux machine:
ssh jaz@18.196.227.119 -i "C:\Nest-Ja-Nieste.pem" -p 52202